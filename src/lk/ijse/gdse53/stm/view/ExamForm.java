/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.gdse53.stm.view;

import java.awt.FlowLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static jssc.SerialPort.MASK_RXCHAR;
import jssc.SerialPortException;
import lk.ijse.gdse53.stm.controller.ExamFormController;
import lk.ijse.gdse53.stm.model.Exam;
import lk.ijse.gdse53.stm.sc.SConnection;

/**
 *
 * @author Yashitha Nadiranga
 */
public class ExamForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form AddStudentForm
     *
     * @throws jssc.SerialPortException
     */
    public ExamForm() throws SerialPortException {
        initComponents();
        setUI();
        addeid();
        addename();
        addCsid();
        serialRead();
        txtmarks.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exmviewload = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txteid = new javax.swing.JTextField();
        btnsubmit = new keeptoo.KButton();
        txtrid = new javax.swing.JTextField();
        btnaddexam = new keeptoo.KButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtdate = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtmarks = new javax.swing.JTextField();
        cmbename = new javax.swing.JComboBox<>();
        cmbCSID = new javax.swing.JComboBox<>();
        txtsname = new javax.swing.JLabel();
        btnaddexam1 = new keeptoo.KButton();

        setBackground(new java.awt.Color(53, 63, 89));
        setBorder(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setFrameIcon(null);

        exmviewload.setBackground(new java.awt.Color(53, 63, 89));
        exmviewload.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Poppins Medium", 0, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Exam Details");
        exmviewload.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Registration ID :");
        exmviewload.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 460, -1, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Exam ID          :");
        exmviewload.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, -1, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Exam Name     :");
        exmviewload.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, -1));

        txteid.setEditable(false);
        txteid.setBackground(new java.awt.Color(53, 63, 89));
        txteid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txteid.setForeground(new java.awt.Color(255, 255, 255));
        txteid.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        exmviewload.add(txteid, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, 860, 30));

        btnsubmit.setText("Submit");
        btnsubmit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnsubmit.setkAllowGradient(false);
        btnsubmit.setkBackGroundColor(new java.awt.Color(11, 182, 83));
        btnsubmit.setkHoverColor(new java.awt.Color(9, 135, 62));
        btnsubmit.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        btnsubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsubmitActionPerformed(evt);
            }
        });
        exmviewload.add(btnsubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 590, 1020, -1));

        txtrid.setBackground(new java.awt.Color(53, 63, 89));
        txtrid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtrid.setForeground(new java.awt.Color(255, 255, 255));
        txtrid.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        txtrid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtridKeyReleased(evt);
            }
        });
        exmviewload.add(txtrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 460, 860, 30));

        btnaddexam.setText("Add Exam");
        btnaddexam.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnaddexam.setkAllowGradient(false);
        btnaddexam.setkBackGroundColor(new java.awt.Color(11, 182, 83));
        btnaddexam.setkHoverColor(new java.awt.Color(9, 135, 62));
        btnaddexam.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        btnaddexam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddexamActionPerformed(evt);
            }
        });
        exmviewload.add(btnaddexam, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 40, 180, 50));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("CSID              :");
        exmviewload.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 130, 20));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Date               : ");
        exmviewload.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 140, 30));

        txtdate.setBackground(new java.awt.Color(53, 63, 89));
        txtdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtdate.setForeground(new java.awt.Color(255, 255, 255));
        txtdate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        exmviewload.add(txtdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 410, 860, 30));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Marks             :");
        exmviewload.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 510, 140, -1));

        txtmarks.setBackground(new java.awt.Color(53, 63, 89));
        txtmarks.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtmarks.setForeground(new java.awt.Color(255, 255, 255));
        txtmarks.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        exmviewload.add(txtmarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 510, 860, 30));

        cmbename.setBackground(new java.awt.Color(53, 63, 89));
        cmbename.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbename.setForeground(new java.awt.Color(255, 255, 255));
        cmbename.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        cmbename.setDoubleBuffered(true);
        cmbename.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbenameItemStateChanged(evt);
            }
        });
        exmviewload.add(cmbename, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 290, 860, 30));

        cmbCSID.setBackground(new java.awt.Color(53, 63, 89));
        cmbCSID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCSID.setForeground(new java.awt.Color(255, 255, 255));
        cmbCSID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        cmbCSID.setDoubleBuffered(true);
        exmviewload.add(cmbCSID, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 860, -1));

        txtsname.setFont(new java.awt.Font("Poppins Medium", 0, 24)); // NOI18N
        txtsname.setForeground(new java.awt.Color(255, 255, 255));
        exmviewload.add(txtsname, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 400, -1));

        btnaddexam1.setText("View Exam Details");
        btnaddexam1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnaddexam1.setkAllowGradient(false);
        btnaddexam1.setkBackGroundColor(new java.awt.Color(11, 182, 83));
        btnaddexam1.setkHoverColor(new java.awt.Color(9, 135, 62));
        btnaddexam1.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        btnaddexam1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddexam1ActionPerformed(evt);
            }
        });
        exmviewload.add(btnaddexam1, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 120, 180, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exmviewload, javax.swing.GroupLayout.DEFAULT_SIZE, 1115, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exmviewload, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnsubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsubmitActionPerformed
        uploadExam();

    }//GEN-LAST:event_btnsubmitActionPerformed

    private void btnaddexamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddexamActionPerformed
        new ExamShedule().setVisible(true);
    }//GEN-LAST:event_btnaddexamActionPerformed

    private void cmbenameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbenameItemStateChanged
        addDate();
    }//GEN-LAST:event_cmbenameItemStateChanged

    private void txtridKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtridKeyReleased
        getname(txtrid.getText());
    }//GEN-LAST:event_txtridKeyReleased

    private void btnaddexam1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddexam1ActionPerformed
        exmviewload.setLayout(new FlowLayout());
        exmviewload.removeAll();
        exmviewload.repaint();
        exmviewload.add(new ViewExamForm()).setVisible(true);
    }//GEN-LAST:event_btnaddexam1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private keeptoo.KButton btnaddexam;
    private keeptoo.KButton btnaddexam1;
    private keeptoo.KButton btnsubmit;
    private javax.swing.JComboBox<String> cmbCSID;
    private javax.swing.JComboBox<String> cmbename;
    private javax.swing.JPanel exmviewload;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JTextField txtdate;
    private javax.swing.JTextField txteid;
    private javax.swing.JTextField txtmarks;
    private javax.swing.JTextField txtrid;
    private javax.swing.JLabel txtsname;
    // End of variables declaration//GEN-END:variables


    private void uploadExam() {
        if (checkValidation()) {
            if (checkeid()) {
                if (checkrid()) {
                    try {
                        Exam e1 = new Exam(
                                txteid.getText(),
                                txtdate.getText(),
                                txtmarks.getText(),
                                txtrid.getText(),
                                cmbCSID.getSelectedItem().toString(),
                                cmbename.getSelectedItem().toString()
                        );

                        if (new ExamFormController().uploadExamDetails(e1)) {
                            JOptionPane.showMessageDialog(null, "Exam Marks Saved Successfully");
                            addeid();
                            txtrid.setText("");
                            txtmarks.setText("");
                            txtsname.setText("");

                        } else {
                            JOptionPane.showMessageDialog(null, "Oops ! something went wrong");
                        }

                    } catch (ClassNotFoundException | NullPointerException | SQLException ex) {
                        Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Oops ! something went wrong. Exam Id Duplicated");
            }
        }
    }

    private void setUI() {
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);

        cmbename.setUI(ColorArrowUI.createUI(cmbename));
        cmbCSID.setUI(ColorArrowUI.createUI(cmbCSID));
    }

    private boolean checkValidation() {
        if (!"".equals(txtrid.getText())) {
            if (!"".equals(txtmarks.getText())) {
                if (Integer.parseInt(txtmarks.getText()) <= 100 & Integer.parseInt(txtmarks.getText()) >= 0) {
                    return true;
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter Marks under or equals 100");
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter Marks");
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter Registration ID");
            return false;
        }
    }

    private void addeid() {
        try {
            String eid = new ExamFormController().geteid();
            eid = eid.replaceAll("E", "");
            int id = Integer.parseInt(eid);
            id = ++id;
            if (id < 10) {
                txteid.setText(String.valueOf("E00" + id));

            } else if (id < 100) {
                txteid.setText(String.valueOf("E0" + id));
            } else {
                txteid.setText(String.valueOf("E" + id));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addename() {
        try {
            ResultSet rs = new ExamFormController().getsname();
            while (rs.next()) {
                cmbename.addItem(rs.getString(1));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addCsid() {
        try {
            ResultSet rs = new ExamFormController().getCsid();
            while (rs.next()) {
                cmbCSID.addItem(rs.getString(1));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void serialRead() throws SerialPortException {
        SConnection.getInstance().disconnectArduino();
        jssc.SerialPort sp = SConnection.getInstance().getSerialPort();
        try {
            sp.openPort();
            System.out.println("Open Serial Port");
            sp.setParams(
                    jssc.SerialPort.BAUDRATE_9600,
                    jssc.SerialPort.DATABITS_8,
                    jssc.SerialPort.STOPBITS_1,
                    jssc.SerialPort.PARITY_NONE);
            sp.setEventsMask(MASK_RXCHAR);
            sp.addEventListener((serialPortEvent) -> {
                try {
                    String readString = sp.readString();
                    if (readString != null) {
                            txtrid.setText(readString);
                            getname(readString);
                    }
                    Thread.sleep(3000);
                } catch (InterruptedException | SerialPortException | NullPointerException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            });

        } catch (SerialPortException | NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Reader Not Found");
        }
    }

    private void addDate() {
        try {
            String ename = cmbename.getSelectedItem().toString();
            ResultSet rs = new ExamFormController().getDate(ename);
            while (rs.next()) {
                txtdate.setText(rs.getString(1));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean checkeid() {
        try {
            ResultSet rs = new ExamFormController().checkEID();
            while (rs.next()) {
                if (rs.getString(1).equals(txteid.getText())) {
                    return false;
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(RegisterStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    private boolean checkrid() {
        try {
            ResultSet rs = new ExamFormController().checkrid();
            while (rs.next()) {
                if (rs.getString(1).equals(txtrid.getText())) {
                    return true;
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AttendanceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "This Student Not Registerd");
        return false;
    }

    public void getname(String rid) {
        try {
            String name = new ExamFormController().getname(rid);
            txtsname.setText(" -  " + name);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


}
